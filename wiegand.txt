wiegand:
  - id: keypad
    #you can change the d1 and d0 pins as you like, htis could be mandatory if you change the board
    d0: GPIO5 
    d1: GPIO4
    on_key:
      - lambda: ESP_LOGI("KEY", "received key %d", x);
    on_tag:
      - lambda: ESP_LOGI("TAG", "received tag %s", x.c_str());
      - lambda: id(keycode).publish_state(x.c_str());
      - lambda: id(coderec).publish_state(true);
      - delay: 200ms
      - lambda: id(coderec).publish_state(false);
    on_raw:
      - lambda: ESP_LOGI("RAW", "received raw %d bits, value %llx", bits, value);

key_collector:
  - id: pincode_reader
    source_id: keypad
    #length can be changed if needed
    min_length: 4 
    max_length: 8
    #end key can be changed if needed
    end_keys: "#" 
    end_key_required: true
    allowed_keys: "0123456789"
    
    #timeout ccan be changed if needed
    timeout: 5s
    on_progress:
      - logger.log:
          format: "input progress: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]
    on_result:
      - logger.log:
          format: "input result: '%s', started by '%c', ended by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)", "(end == 0 ? '~' : end)" ]
      - lambda: id(keycode).publish_state(x.c_str());
      - lambda: id(coderec).publish_state(true);
      - delay: 200ms
      - lambda: id(coderec).publish_state(false);
    on_timeout:
      - logger.log:
          format: "input timeout: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]

text_sensor:
  - platform: template
    name: keycode
    id: keycode

binary_sensor:
  - platform: template
    name: code received
    id: coderec